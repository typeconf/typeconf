import { EmitContext, emitFile, resolvePath } from "@typespec/compiler";
import { $onEmit as typescriptEmit } from "@typespec-tools/emitter-typescript";
import { promises as fsAsync } from 'fs';
import path from 'path';

async function shouldOmitExtensions(projectDir: string): Promise<boolean> {
  try {
    const tsconfigPath = path.join(projectDir, 'tsconfig.json');
    const tsconfigContent = await fsAsync.readFile(tsconfigPath, 'utf-8');
    const tsconfig = JSON.parse(tsconfigContent);
    
    return tsconfig.compilerOptions?.moduleResolution === 'bundler' || 
           tsconfig.compilerOptions?.moduleResolution === 'node16' || 
           tsconfig.compilerOptions?.moduleResolution === 'nodenext';
  } catch {
    return false;
  }
}

export async function $onEmit(context: EmitContext) {
  if (context.program.compilerOptions.noEmit) {
    return;
  }

  const parentDir = path.dirname(context.emitterOutputDir);
  const valuesConfigPath = path.join(parentDir, 'values.config.ts');
  const hasValuesConfig = await fsAsync.access(valuesConfigPath).then(() => true).catch(() => false);
  const omitExtensions = await shouldOmitExtensions(parentDir);
  
  const extension = omitExtensions ? '' : '.js';
  const valuesPath = hasValuesConfig 
    ? `../values.config${extension}`
    : `../src/values.config${extension}`;

  await emitFile(context.program, {
    path: resolvePath(context.emitterOutputDir, "index.ts"),
    content: `// generated by Typeconf, DO NOT EDIT
export * from '@typeconf/sdk' // Typeconf SDK
export * from './all${extension}' // Your config types
export { default as values } from '${valuesPath}' // Your config values`,
  });
  await typescriptEmit(context);
}
